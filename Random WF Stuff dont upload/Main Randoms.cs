using Deadpan.Enums.Engine.Components.Modding;
using HarmonyLib;
using System;
using UnityEngine;
using System.Linq;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using TMPro;
using WildfrostHopeMod.Utils;
using UnityEngine.Localization;
using UnityEngine.Localization.Settings;
using System.Runtime.InteropServices;
using System.Diagnostics.Eventing.Reader;
using Steamworks.Ugc;
using UnityExplorer;
using UnityEngine.EventSystems;
using System.Runtime.InteropServices.ComTypes;
using static CardData;
using static Steamworks.InventoryItem;
using static System.Net.Mime.MediaTypeNames;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.IO;
using UnityEngine.Events;
using System.Runtime.Remoting.Messaging;
using UnityEngine.Localization.Tables;
using System.Text;
using static UnityExplorer.UI.Panels.HookManagerPanel;
using UnityEngine.Pool;
using UnityEngine.Localization.SmartFormat.Core.Parsing;
using System.Text.RegularExpressions;
using UnityEngine.AddressableAssets;
using UnityEngine.AddressableAssets.ResourceLocators;
//using Effect_Randomiser


namespace WildfrostHopeMod.Randoms
{
    public partial class RandomMod : WildfrostMod
    {

        

        public static Paths Paths;
        public static RandomMod Mod;
        public RandomMod(string modDirectory) : base(modDirectory)
        {
            Mod = this; Paths = new Paths(ModDirectory);
            var displayer = Resources.FindObjectsOfTypeAll<GameUpdateDisplayer>().FirstOrDefault();
            if (displayer)
            {
                //displayer.display.gameObject.SetActive(true);
            }
        }
        public override string GUID => "hope.wildfrost.randoms";
        public override string[] Depends => new string[] { };
        public override string Title => "randoms";
        public override string Description => "";
        public static GameObject behaviour;
        public static ErrorHandlerSystem e;

        [ConfigItem(0, "Blood Bell Options: 0.", "     Blood Bell Difficulty ")]
        //[ConfigSlider(0, 2)]
        //[ConfigInput]
        public float Blood_Bell;

        public static Scene HideAndDontSave;

        private List<CardDataBuilder> cards = new();
        private List<StatusEffectDataBuilder> statusEffects;
        private bool preLoaded = false;

        public new T Get<T>(string name) where T : DataFile
        {
            if (typeof(StatusEffectData).IsAssignableFrom(typeof(T)))
                return base.Get<StatusEffectData>(name) as T;
            else
                return base.Get<T>(name);

        }

        private void CreateModAssets()
        {
            //Code for status effects
            cards = new List<CardDataBuilder>
            {
                new CardDataBuilder(this).CreateUnit("test", "Test t")
                .SetStats(1, 1, 1)
                .WithNextPhase(AddressableLoader.GetGroup<CardData>("CardData").RandomItem())
            };
            cards.PrintAllFields();
        }



        public override List<T> AddAssets<T, Y>() //This method is called 6-7 times in base.Load() for each Builder. Can you name them all?
        {
            var lookup =
                from card in AddressableLoader.GetGroup<CardData>("CardData")
                group card by card.title;


            cards.Add(new CardDataBuilder(this)
        .CreateUnit(name: "HeartmistStations", englishTitle: "Heartmist Stationa", idleAnim: "PulseAnimationProfile")
        .WithTitle("红心雾台", SystemLanguage.ChineseSimplified)
        .SetStats(0, 0, 0)
        .SetSprites(IconSprite, IconSprite)
        .WithPools("ClunkItemPool")
        .WithValue(50)
        .SubscribeToAfterAllBuildEvent(card =>
        {
            card.attackEffects = new StatusEffectStacks[] {
                new CardData.StatusEffectStacks(Get<StatusEffectData>("Null"), 1),
            };
            card.startWithEffects = new CardData.StatusEffectStacks[]
            {
                new CardData.StatusEffectStacks(Get<StatusEffectData>("MultiHit"), 1),
            };
            card.traits = new List<CardData.TraitStacks> { new TraitStacks(Get<TraitData>("Barrage"), 1) };
        }));


            var keywords = new List<KeywordDataBuilder>();

            keywords.Add(
                new KeywordDataBuilder(this)
                .Create("glacial")                               //The internal name for the upgrade.
                .WithTitle("Glacial")                            //The in-game name for the upgrade.
                .WithTitleColour(new Color(0.85f, 0.44f, 0.85f)) //Light purple on the title of the keyword pop-up
                .WithShowName(true)                              //Shows name in Keyword box (as opposed to a nonexistant icon).
                .WithDescription("Apply equal <keyword=snow> or <keyword=frost> when the other is applied|Does not cause infinites!") //Format is body|note.
                .WithNoteColour(new Color(0.85f, 0.44f, 0.85f))  //Somewhat teal
                .WithBodyColour(new Color(0.2f, 0.5f, 0.5f))       //Cyan-ish
                .WithCanStack(false)                             //The keyword does not show its stack number.
                );

            var traits = new List<TraitDataBuilder>();
            traits.Add(
                new TraitDataBuilder(this)
                .Create("Splash2")
                .WithOverrides(Get<TraitData>("Barrage"))
                .SubscribeToAfterAllBuildEvent(trait =>
                {
                    trait.keyword = Get<KeywordData>("snow");
                    trait.effects = [Get<StatusEffectData>("Null")];
                }));

            return typeof(Y).Name switch
            {
                nameof(CardData) => cards.Cast<T>().ToList(),
                nameof(KeywordData) => keywords.Cast<T>().ToList(),
                nameof(TraitData) => traits.Cast<T>().ToList(),
                _ => null,
            };
        }

        public void Print() => Debug.LogWarning("HELLO WORLD");

        public static void Deal()
        {
            string s = "﻿\n// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.BattleDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class BattleDataBuilder : DataFileBuilder<BattleData, BattleDataBuilder>\r\n  {\r\n    public BattleDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public BattleDataBuilder()\r\n    {\r\n    }\r\n\r\n    public BattleDataBuilder WithTitle(string title)\r\n    {\r\n      this._data.title = title;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithPointFactor(float factor = 1f)\r\n    {\r\n      this._data.pointFactor = factor;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithWaveCounter(int waveCounter = 4)\r\n    {\r\n      this._data.waveCounter = waveCounter;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithPools(params BattleWavePoolData[] pools)\r\n    {\r\n      this._data.pools = pools;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithBonusUnitPool(params CardData[] pools)\r\n    {\r\n      this._data.bonusUnitPool = pools;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithBonusUnitRange(Vector2Int v)\r\n    {\r\n      this._data.bonusUnitRange = v;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithGoldGiverPool(params CardData[] pools)\r\n    {\r\n      this._data.goldGiverPool = pools;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithGoldGivers(int amount = 1)\r\n    {\r\n      this._data.goldGivers = amount;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithGenerationScript(BattleGenerationScript s)\r\n    {\r\n      this._data.generationScript = s;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithSetUpScript(Script s)\r\n    {\r\n      this._data.setUpScript = s;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithSprite(Sprite sprite)\r\n    {\r\n      this._data.sprite = sprite;\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithSprite(string sprite)\r\n    {\r\n      this._data.sprite = this.Mod.GetImageSprite(sprite);\r\n      return this;\r\n    }\r\n\r\n    public BattleDataBuilder WithName(string name, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_ref\", name);\r\n      this._data.nameRef = collection.GetString(this._data.name + \"_ref\");\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.BossRewardDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class BossRewardDataBuilder : DataFileBuilder<BossRewardData, BossRewardDataBuilder>\r\n  {\r\n    public BossRewardDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public BossRewardDataBuilder()\r\n    {\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.BuildingPlotTypeBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class BuildingPlotTypeBuilder : DataFileBuilder<BuildingPlotType, BuildingPlotTypeBuilder>\r\n  {\r\n    public BuildingPlotTypeBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public BuildingPlotTypeBuilder()\r\n    {\r\n    }\r\n\r\n    public BuildingPlotTypeBuilder WithIllegalBuildings(params BuildingType[] illegalBuildings)\r\n    {\r\n      this._data.illegalBuildings = illegalBuildings;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.BuildingTypeBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class BuildingTypeBuilder : DataFileBuilder<BuildingType, BuildingTypeBuilder>\r\n  {\r\n    public BuildingTypeBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public BuildingTypeBuilder()\r\n    {\r\n    }\r\n\r\n    public BuildingTypeBuilder WithTitle(LocalizedString title)\r\n    {\r\n      this._data.titleKey = title;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_building_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_building_title\");\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithHelp(LocalizedString title)\r\n    {\r\n      this._data.helpKey = title;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithHelp(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_building_help\", title);\r\n      this._data.helpKey = collection.GetString(this._data.name + \"_building_help\");\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithHelpEmoteType(Prompt.Emote.Type helpEmoteType = Prompt.Emote.Type.Explain)\r\n    {\r\n      this._data.helpEmoteType = helpEmoteType;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithStarted(UnlockData started)\r\n    {\r\n      this._data.started = started;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithFinished(UnlockData finished)\r\n    {\r\n      this._data.finished = finished;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithUnlocks(params UnlockData[] unlocks)\r\n    {\r\n      this._data.unlocks = unlocks;\r\n      return this;\r\n    }\r\n\r\n    public BuildingTypeBuilder WithUnlockedCheckedKey(string unlockedCheckedKey)\r\n    {\r\n      this._data.unlockedCheckedKey = unlockedCheckedKey;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.CampaignNodeTypeBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class CampaignNodeTypeBuilder : DataFileBuilder<CampaignNodeType, CampaignNodeTypeBuilder>\r\n  {\r\n    public CampaignNodeTypeBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder()\r\n    {\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithLetter(string letter)\r\n    {\r\n      this._data.letter = letter;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithZoneName(string zoneName)\r\n    {\r\n      this._data.zoneName = zoneName;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithMustClear(bool mustClear)\r\n    {\r\n      this._data.mustClear = mustClear;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithCanSkip(bool canSkip)\r\n    {\r\n      this._data.canSkip = canSkip;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithCanEnter(bool canEnter)\r\n    {\r\n      this._data.canEnter = canEnter;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithIsBattle(bool isBattle)\r\n    {\r\n      this._data.isBattle = isBattle;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithIsBoss(bool isBoss)\r\n    {\r\n      this._data.isBoss = isBoss;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithModifierReward(bool modifierReward)\r\n    {\r\n      this._data.modifierReward = modifierReward;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithInteractable(bool interactable)\r\n    {\r\n      this._data.interactable = interactable;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithStartRevealed(bool startRevealed)\r\n    {\r\n      this._data.startRevealed = startRevealed;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithFinalNode(bool finalNode)\r\n    {\r\n      this._data.finalNode = finalNode;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithMapNodePrefab(MapNode mapNodePrefab)\r\n    {\r\n      this._data.mapNodePrefab = mapNodePrefab;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithMapNodeSprite(Sprite mapNodeSprite)\r\n    {\r\n      this._data.mapNodeSprite = mapNodeSprite;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithMapNodeSprite(string mapNodeSprite)\r\n    {\r\n      this._data.mapNodeSprite = this.Mod.GetImageSprite(mapNodeSprite);\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithSize(float size = 1f)\r\n    {\r\n      this._data.size = size;\r\n      return this;\r\n    }\r\n\r\n    public CampaignNodeTypeBuilder WithCanLink(bool canLink)\r\n    {\r\n      this._data.canLink = canLink;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.CardDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing MonoMod.Cil;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class CardDataBuilder : DataFileBuilder<CardData, CardDataBuilder>\r\n  {\r\n    private ChallengeData UnlockChallenge;\r\n\r\n    public CardDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public CardDataBuilder()\r\n    {\r\n    }\r\n\r\n    public CardDataBuilder SetStats(int? health = null, int? damage = null, int counter = 0)\r\n    {\r\n      return this.SetHealth(health).SetDamage(damage).SetCounter(counter);\r\n    }\r\n\r\n    public CardDataBuilder SetCounter(int counter)\r\n    {\r\n      this._data.counter = counter;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetDamage(int? damage)\r\n    {\r\n      if (damage.HasValue)\r\n        this._data.damage = damage.Value;\r\n      this._data.hasAttack = damage.HasValue;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder NeedsTarget(bool value = true)\r\n    {\r\n      this._data.needsTarget = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetHealth(int? health)\r\n    {\r\n      if (health.HasValue)\r\n        this._data.hp = health.Value;\r\n      this._data.hasHealth = health.HasValue;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetSprites(Sprite mainSprite, Sprite backgroundSprite)\r\n    {\r\n      this._data.mainSprite = mainSprite;\r\n      this._data.backgroundSprite = backgroundSprite;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetSprites(string mainSprite, string backgroundSprite)\r\n    {\r\n      return this.SetSprites(this.Mod.ImagePath(mainSprite).ToSprite(), this.Mod.ImagePath(backgroundSprite).ToSprite());\r\n    }\r\n\r\n    public CardDataBuilder SetStartWithEffect(params CardData.StatusEffectStacks[] stacks)\r\n    {\r\n      this._data.startWithEffects = stacks;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetTraits(params CardData.TraitStacks[] stacks)\r\n    {\r\n      this._data.traits = stacks.ToList<CardData.TraitStacks>();\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithDescription(string desc)\r\n    {\r\n      this._data.desc = desc;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithValue(int price)\r\n    {\r\n      this._data.value = price;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithTargetMode(TargetMode mode)\r\n    {\r\n      this._data.targetMode = mode;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithTargetMode(string mode = \"TargetModeBasic\")\r\n    {\r\n      this._data.targetMode = Extensions.GetTargetMode(mode);\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithPlayType(Card.PlayType type)\r\n    {\r\n      this._data.playType = type;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder SetAttackEffect(params CardData.StatusEffectStacks[] stacks)\r\n    {\r\n      this._data.attackEffects = stacks;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithIdleAnimationProfile(CardAnimationProfile bp)\r\n    {\r\n      this._data.idleAnimationProfile = bp;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithIdleAnimationProfile(string bp = \"SwayAnimationProfile\")\r\n    {\r\n      return this.WithIdleAnimationProfile(Extensions.GetCardAnimationProfile(bp));\r\n    }\r\n\r\n    public CardDataBuilder WithBloodProfile(BloodProfile bp)\r\n    {\r\n      this._data.bloodProfile = bp;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithBloodProfile(string bp = \"Blood Profile Normal\")\r\n    {\r\n      return this.WithBloodProfile(this.Mod.GetAsset<BloodProfile>(bp));\r\n    }\r\n\r\n    public CardDataBuilder CanPlayOnBoard(bool value = true)\r\n    {\r\n      this._data.canPlayOnBoard = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder CanPlayOnEnemy(bool value = true)\r\n    {\r\n      this._data.canPlayOnEnemy = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder CanPlayOnFriendly(bool value = true)\r\n    {\r\n      this._data.canPlayOnFriendly = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder CanPlayOnHand(bool value = true)\r\n    {\r\n      this._data.canPlayOnHand = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder CanBeHit(bool value = true)\r\n    {\r\n      this._data.canBeHit = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder CanShoveToOtherRow(bool value = true)\r\n    {\r\n      this._data.canShoveToOtherRow = value;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder AsUnit(string targetMode = \"TargetModeBasic\", string idleAnim = \"SwayAnimationProfile\", string bloodProfile = \"Blood Profile Normal\")\r\n    {\r\n      this._data.canPlayOnEnemy = true;\r\n      this._data.canBeHit = true;\r\n      this._data.playType = Card.PlayType.Place;\r\n      this._data.canPlayOnBoard = true;\r\n      this._data.cardType = this.Mod.Get<CardType>(\"Friendly\");\r\n      return this.SetStats(new int?(0), new int?(0)).WithTargetMode(targetMode).WithBloodProfile(bloodProfile).WithIdleAnimationProfile(idleAnim);\r\n    }\r\n\r\n    public CardDataBuilder AsItem(string targetMode = \"TargetModeBasic\", string idleAnim = \"SwayAnimationProfile\")\r\n    {\r\n      this._data.canPlayOnEnemy = true;\r\n      this._data.canBeHit = false;\r\n      this._data.playType = Card.PlayType.Play;\r\n      this._data.canPlayOnBoard = true;\r\n      this._data.cardType = this.Mod.Get<CardType>(\"Item\");\r\n      return this.FreeModify((System.Action<CardData>) (a => a.uses = 1)).WithTargetMode(targetMode).WithIdleAnimationProfile(idleAnim).CanPlayOnHand(false);\r\n    }\r\n\r\n    public CardDataBuilder IsCompanion(ChallengeData challenge, bool value = true)\r\n    {\r\n      this.UnlockChallenge = challenge;\r\n      if (value)\r\n      {\r\n        this._data.AddToCompanions();\r\n        BuildingSequenceWithUnlocks<BuildingCardUnlockSequence>.OnStart += new RuntimeILReferenceBag.FastDelegateInvokers.Action<BuildingCardUnlockSequence>(this.UnlockSequenceOnOnStart<BuildingCardUnlockSequence>);\r\n      }\r\n      else\r\n      {\r\n        this._data.RemoveFromCompanions();\r\n        BuildingSequenceWithUnlocks<BuildingCardUnlockSequence>.OnStart -= new RuntimeILReferenceBag.FastDelegateInvokers.Action<BuildingCardUnlockSequence>(this.UnlockSequenceOnOnStart<BuildingCardUnlockSequence>);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder IsItem(ChallengeData challenge, bool value = true)\r\n    {\r\n      this.UnlockChallenge = challenge;\r\n      if (value)\r\n      {\r\n        this._data.AddToItems();\r\n        BuildingSequenceWithUnlocks<InventorHutSequence>.OnStart += new RuntimeILReferenceBag.FastDelegateInvokers.Action<InventorHutSequence>(this.UnlockSequenceOnOnStart<InventorHutSequence>);\r\n      }\r\n      else\r\n      {\r\n        this._data.RemoveFromItems();\r\n        BuildingSequenceWithUnlocks<InventorHutSequence>.OnStart -= new RuntimeILReferenceBag.FastDelegateInvokers.Action<InventorHutSequence>(this.UnlockSequenceOnOnStart<InventorHutSequence>);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder IsPet(string challenge, bool value = true)\r\n    {\r\n      return this.IsPet(this.Mod.Get<ChallengeData>(challenge), value);\r\n    }\r\n\r\n    public CardDataBuilder IsPet(ChallengeData challenge, bool value = true)\r\n    {\r\n      this.UnlockChallenge = challenge;\r\n      if (value)\r\n      {\r\n        this._data.AddToPets((UnityEngine.Object) challenge == (UnityEngine.Object) null ? (string) null : challenge.name);\r\n        BuildingSequenceWithUnlocks<PetHutSequence>.OnStart += new RuntimeILReferenceBag.FastDelegateInvokers.Action<PetHutSequence>(this.UnlockSequenceOnOnStart<PetHutSequence>);\r\n      }\r\n      else\r\n      {\r\n        this._data.RemoveFromPets();\r\n        BuildingSequenceWithUnlocks<PetHutSequence>.OnStart -= new RuntimeILReferenceBag.FastDelegateInvokers.Action<PetHutSequence>(this.UnlockSequenceOnOnStart<PetHutSequence>);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    private void UnlockSequenceOnOnStart<T>(BuildingSequenceWithUnlocks<T> obj) where T : BuildingSequenceWithUnlocks<T>\r\n    {\r\n      obj.AddSlot(this.UnlockChallenge);\r\n    }\r\n\r\n    public CardDataBuilder CreateItem(\r\n      string name,\r\n      string englishTitle,\r\n      string targetMode = \"TargetModeBasic\",\r\n      string idleAnim = \"SwayAnimationProfile\")\r\n    {\r\n      return this.Create(name).WithTitle(englishTitle).AsItem(targetMode, idleAnim);\r\n    }\r\n\r\n    [Obsolete(\"Reverse\", true)]\r\n    public CardDataBuilder CreateItem(\r\n      string name,\r\n      string englishTitle,\r\n      string targetMode,\r\n      string wtv,\r\n      string idleAnim)\r\n    {\r\n      return this.Create(name).WithTitle(englishTitle).AsItem(targetMode, idleAnim);\r\n    }\r\n\r\n    public CardDataBuilder CreateUnit(\r\n      string name,\r\n      string englishTitle,\r\n      string targetMode = \"TargetModeBasic\",\r\n      string bloodProfile = \"Blood Profile Normal\",\r\n      string idleAnim = \"SwayAnimationProfile\")\r\n    {\r\n      return this.Create(name).WithTitle(englishTitle).AsUnit(targetMode, idleAnim, bloodProfile);\r\n    }\r\n\r\n    public CardDataBuilder WithPools(params RewardPool[] pools)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardData, CardDataBuilder>.AfterBuildDelegate) (data => data.WithPools(pools));\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithPools(params string[] pools)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardData, CardDataBuilder>.AfterBuildDelegate) (data => data.WithPools(((IEnumerable<string>) pools).Select<string, RewardPool>(new System.Func<string, RewardPool>(Extensions.GetRewardPool)).ToArray<RewardPool>()));\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder AddPool(RewardPool pool)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardData, CardDataBuilder>.AfterBuildDelegate) (data => data.AddPool(pool));\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder AddPool(string pool = \"GeneralUnitPool\")\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardData, CardDataBuilder>.AfterBuildDelegate) (data => data.AddPool(Extensions.GetRewardPool(pool)));\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithCardType(CardType type)\r\n    {\r\n      this._data.cardType = type;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithCardType(string type = \"Friendly\")\r\n    {\r\n      this._data.cardType = this.Mod.Get<CardType>(type);\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithTitle(LocalizedString title)\r\n    {\r\n      this._data.titleKey = title;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithFlavour(LocalizedString flavour)\r\n    {\r\n      this._data.flavourKey = flavour;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithText(LocalizedString text)\r\n    {\r\n      this._data.textKey = text;\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_title\");\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithFlavour(string flavour, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_flavour\", flavour);\r\n      this._data.flavourKey = collection.GetString(this._data.name + \"_flavour\");\r\n      return this;\r\n    }\r\n\r\n    public CardDataBuilder WithText(string text, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_text\", text);\r\n      this._data.textKey = collection.GetString(this._data.name + \"_text\");\r\n      return this;\r\n    }\r\n\r\n    ~CardDataBuilder() => UnityEngine.Object.Destroy((UnityEngine.Object) this._data);\r\n\r\n    public CardDataBuilder Clone()\r\n    {\r\n      CardDataBuilder cardDataBuilder = new CardDataBuilder(this.Mod);\r\n      cardDataBuilder._data = this._data.InstantiateKeepName<CardData>();\r\n      return cardDataBuilder;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.CardTypeBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\nusing UnityEngine.AddressableAssets;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class CardTypeBuilder : DataFileBuilder<CardType, CardTypeBuilder>\r\n  {\r\n    public CardTypeBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public CardTypeBuilder()\r\n    {\r\n    }\r\n\r\n    public CardTypeBuilder WithSortPriority(int sortPriority)\r\n    {\r\n      this._data.sortPriority = sortPriority;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithIcon(Sprite icon)\r\n    {\r\n      this._data.icon = icon;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithIcon(string icon)\r\n    {\r\n      this._data.icon = this.Mod.GetImageSprite(icon);\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithPrefabRef(AssetReference prefabRef)\r\n    {\r\n      this._data.prefabRef = prefabRef;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithTextBoxSprite(Sprite icon)\r\n    {\r\n      this._data.textBoxSprite = icon;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithTextBoxSprite(string icon)\r\n    {\r\n      this._data.textBoxSprite = this.Mod.GetImageSprite(icon);\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithNameTagSprite(Sprite icon)\r\n    {\r\n      this._data.nameTagSprite = icon;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithNameTagSprite(string icon)\r\n    {\r\n      this._data.nameTagSprite = this.Mod.GetImageSprite(icon);\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_type_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_type_title\");\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithTitle(LocalizedString str)\r\n    {\r\n      this._data.titleKey = str;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithCanDie(bool canDie)\r\n    {\r\n      this._data.canDie = canDie;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithCanTakeCrown(bool canTakeCrown)\r\n    {\r\n      this._data.canTakeCrown = canTakeCrown;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithCanRecall(bool canRecall)\r\n    {\r\n      this._data.canRecall = canRecall;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithCanReserve(bool canReserve)\r\n    {\r\n      this._data.canReserve = canReserve;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithItem(bool item)\r\n    {\r\n      this._data.item = item;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithUnit(bool unit)\r\n    {\r\n      this._data.unit = unit;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithTag(string tag)\r\n    {\r\n      this._data.tag = tag;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithMiniboss(bool miniboss)\r\n    {\r\n      this._data.miniboss = miniboss;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithDiscoverInJournal(bool discoverInJournal)\r\n    {\r\n      this._data.discoverInJournal = discoverInJournal;\r\n      return this;\r\n    }\r\n\r\n    public CardTypeBuilder WithDescriptionColours(Text.ColourProfileHex descriptionColours)\r\n    {\r\n      this._data.descriptionColours = descriptionColours;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.CardUpgradeDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing MonoMod.Cil;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class CardUpgradeDataBuilder : DataFileBuilder<CardUpgradeData, CardUpgradeDataBuilder>\r\n  {\r\n    private ChallengeData UnlockChallenge;\r\n\r\n    public CardUpgradeDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public CardUpgradeDataBuilder()\r\n    {\r\n    }\r\n\r\n    public CardUpgradeDataBuilder CreateCharm(string name)\r\n    {\r\n      return this.Create(name).WithType(CardUpgradeData.Type.Charm).AddPool();\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithPools(params RewardPool[] pools)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardUpgradeData, CardUpgradeDataBuilder>.AfterBuildDelegate) (data => data.WithPools(pools));\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithPools(params string[] pools)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardUpgradeData, CardUpgradeDataBuilder>.AfterBuildDelegate) (data => data.WithPools(((IEnumerable<string>) pools).Select<string, RewardPool>(new System.Func<string, RewardPool>(Extensions.GetRewardPool)).ToArray<RewardPool>()));\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder AddPool(RewardPool pool)\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardUpgradeData, CardUpgradeDataBuilder>.AfterBuildDelegate) (data => data.AddPool(pool));\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder AddPool(string pool = \"GeneralCharmPool\")\r\n    {\r\n      this.AfterBuildEvent += (DataFileBuilder<CardUpgradeData, CardUpgradeDataBuilder>.AfterBuildDelegate) (data => data.AddPool(Extensions.GetRewardPool(pool)));\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithTier(int tier)\r\n    {\r\n      this._data.tier = tier;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithImage(Sprite img)\r\n    {\r\n      this._data.image = img;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithType(CardUpgradeData.Type type)\r\n    {\r\n      this._data.type = type;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetAttackEffects(params CardData.StatusEffectStacks[] efs)\r\n    {\r\n      this._data.attackEffects = efs;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetEffects(params CardData.StatusEffectStacks[] efs)\r\n    {\r\n      this._data.effects = efs;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetTraits(params CardData.TraitStacks[] efs)\r\n    {\r\n      this._data.giveTraits = efs;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetScripts(params CardScript[] efs)\r\n    {\r\n      this._data.scripts = efs;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetConstraints(params TargetConstraint[] efs)\r\n    {\r\n      this._data.targetConstraints = efs;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetBecomesTarget(bool val)\r\n    {\r\n      this._data.becomesTargetedCard = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder SetCanBeRemoved(bool val)\r\n    {\r\n      this._data.canBeRemoved = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder ChangeDamage(int val)\r\n    {\r\n      this._data.damage = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder ChangeHP(int val)\r\n    {\r\n      this._data.hp = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder ChangeCounter(int val)\r\n    {\r\n      this._data.counter = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder ChangeUses(int val)\r\n    {\r\n      this._data.uses = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder ChangeEffectBonus(int val)\r\n    {\r\n      this._data.effectBonus = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithSetDamage(bool val)\r\n    {\r\n      this._data.setDamage = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithSetHP(bool val)\r\n    {\r\n      this._data.setHp = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithSetCounter(bool val)\r\n    {\r\n      this._data.setCounter = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithSetUses(bool val)\r\n    {\r\n      this._data.setUses = val;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder IsCharm(ChallengeData challenge, bool value = true)\r\n    {\r\n      this.UnlockChallenge = challenge;\r\n      if (value)\r\n      {\r\n        this._data.AddToCharms(challenge.reward);\r\n        BuildingSequenceWithUnlocks<ChallengeShrineSequence>.OnStart += new RuntimeILReferenceBag.FastDelegateInvokers.Action<ChallengeShrineSequence>(this.UnlockSequenceOnOnStart<ChallengeShrineSequence>);\r\n      }\r\n      else\r\n      {\r\n        this._data.RemoveFromCharms(challenge.reward);\r\n        BuildingSequenceWithUnlocks<ChallengeShrineSequence>.OnStart -= new RuntimeILReferenceBag.FastDelegateInvokers.Action<ChallengeShrineSequence>(this.UnlockSequenceOnOnStart<ChallengeShrineSequence>);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    private void UnlockSequenceOnOnStart<T>(BuildingSequenceWithUnlocks<T> obj) where T : BuildingSequenceWithUnlocks<T>\r\n    {\r\n      obj.AddChallengeStone(this.UnlockChallenge);\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithImage(string img)\r\n    {\r\n      this._data.image = this.Mod.ImagePath(img).ToSprite();\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithTitle(LocalizedString title)\r\n    {\r\n      this._data.titleKey = title;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithText(LocalizedString text)\r\n    {\r\n      this._data.textKey = text;\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Upgrades\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_title\");\r\n      return this;\r\n    }\r\n\r\n    public CardUpgradeDataBuilder WithText(string text, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Upgrades\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_text\", text);\r\n      this._data.textKey = collection.GetString(this._data.name + \"_text\");\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.ChallengeDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class ChallengeDataBuilder : DataFileBuilder<ChallengeData, ChallengeDataBuilder>\r\n  {\r\n    public ChallengeDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public ChallengeDataBuilder WithTitle(LocalizedString str)\r\n    {\r\n      this._data.titleKey = str;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithText(LocalizedString str)\r\n    {\r\n      this._data.textKey = str;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithRewardText(LocalizedString str)\r\n    {\r\n      this._data.rewardKey = str;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Challenges\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_title\");\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithText(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Challenges\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_text\", title);\r\n      this._data.textKey = collection.GetString(this._data.name + \"_text\");\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder()\r\n    {\r\n    }\r\n\r\n    public ChallengeDataBuilder WithRewardText(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Challenges\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_reward\", title);\r\n      this._data.rewardKey = collection.GetString(this._data.name + \"_reward\");\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithGoal(int amountGoal)\r\n    {\r\n      this._data.goal = amountGoal;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithListener(ChallengeListener listener)\r\n    {\r\n      this._data.listener = listener;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithListener(string listener)\r\n    {\r\n      this._data.listener = this.Mod.Get<ChallengeListener>(listener);\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithIcon(Sprite icon)\r\n    {\r\n      this._data.icon = icon;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithRequires(params ChallengeData[] requires)\r\n    {\r\n      this._data.requires = requires;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithRequires(params string[] requires)\r\n    {\r\n      this._data.requires = ((IEnumerable<string>) requires).Select<string, ChallengeData>(new Func<string, ChallengeData>(this.Mod.Get<ChallengeData>)).ToArray<ChallengeData>();\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithReward(UnlockData reward)\r\n    {\r\n      this._data.reward = reward;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeDataBuilder WithReward(string reward)\r\n    {\r\n      this._data.reward = this.Mod.Get<UnlockData>(reward);\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.ChallengeListenerBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class ChallengeListenerBuilder : \r\n    DataFileBuilder<ChallengeListener, ChallengeListenerBuilder>\r\n  {\r\n    public ChallengeListenerBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public ChallengeListenerBuilder()\r\n    {\r\n    }\r\n\r\n    public ChallengeListenerBuilder WithKey(string key)\r\n    {\r\n      this._data.key = key;\r\n      this._data.hasKey = true;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeListenerBuilder WithCheckType(ChallengeListener.CheckType type)\r\n    {\r\n      this._data.checkType = type;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeListenerBuilder WithStat(string stat)\r\n    {\r\n      this._data.stat = stat;\r\n      return this;\r\n    }\r\n\r\n    public ChallengeListenerBuilder WithStat(int toReach)\r\n    {\r\n      this._data.target = toReach;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.ClassDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing FMODUnity;\r\nusing UnityEngine;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class ClassDataBuilder : DataFileBuilder<ClassData, ClassDataBuilder>\r\n  {\r\n    public ClassDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public ClassDataBuilder()\r\n    {\r\n    }\r\n\r\n    public ClassDataBuilder WithRequiresUnlock(UnlockData requiresUnlock)\r\n    {\r\n      this._data.requiresUnlock = requiresUnlock;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithStartingInventory(Inventory startingInventory)\r\n    {\r\n      this._data.startingInventory = startingInventory;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithLeaders(params CardData[] leaders)\r\n    {\r\n      this._data.leaders = leaders;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithCharacterPrefab(Character characterPrefab)\r\n    {\r\n      this._data.characterPrefab = characterPrefab;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithRewardPools(params RewardPool[] rewardPools)\r\n    {\r\n      this._data.rewardPools = rewardPools;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithSelectSfxEvent(EventReference selectSfxEvent)\r\n    {\r\n      this._data.selectSfxEvent = selectSfxEvent;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithFlag(Sprite flag)\r\n    {\r\n      this._data.flag = flag;\r\n      return this;\r\n    }\r\n\r\n    public ClassDataBuilder WithFlag(string flag)\r\n    {\r\n      this._data.flag = this.Mod.GetImageSprite(flag);\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.DataFileBuilder`2\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing System;\r\nusing UnityEngine;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public abstract class DataFileBuilder<T, Y>\r\n    where T : DataFile\r\n    where Y : DataFileBuilder<T, Y>, new()\r\n  {\r\n    internal T _data;\r\n    public WildfrostMod Mod;\r\n\r\n    protected virtual T BuildInstance() => this._data.InstantiateKeepName<T>();\r\n\r\n    public T Build()\r\n    {\r\n      T d = this.BuildInstance();\r\n      this.OnAfterBuildEvent(d);\r\n      return d;\r\n    }\r\n\r\n    protected DataFileBuilder(WildfrostMod mod) => this.Mod = mod;\r\n\r\n    protected DataFileBuilder()\r\n    {\r\n    }\r\n\r\n    public Y FreeModify(Action<T> action)\r\n    {\r\n      if (action != null)\r\n        action(this._data);\r\n      return (Y) this;\r\n    }\r\n\r\n    public Y FreeModify<D>(Action<D> action) where D : T\r\n    {\r\n      if (action != null)\r\n        action( this._data as D);\r\n      return (Y) this;\r\n    }\r\n\r\n    public event DataFileBuilder<T, Y>.AfterBuildDelegate AfterBuildEvent;\r\n\r\n    public event DataFileBuilder<T, Y>.AfterBuildDelegate AfterAllModBuildsEvent;\r\n\r\n    public virtual Y Create(string name)\r\n    {\r\n      if (this.Mod != null)\r\n        name = Extensions.PrefixGUID(name, this.Mod);\r\n      if ( this._data != null)\r\n        UnityEngine.Object.Destroy((UnityEngine.Object) this._data);\r\n      this._data = ScriptableObject.CreateInstance<T>();\r\n      this._data.name = name;\r\n      return this as Y;\r\n    }\r\n\r\n    public virtual Y Create<X>(string name) where X : T\r\n    {\r\n      if (this.Mod != null)\r\n        name = Extensions.PrefixGUID(name, this.Mod);\r\n      if ( this._data != null)\r\n        UnityEngine.Object.Destroy((UnityEngine.Object) this._data);\r\n      this._data = (T) ScriptableObject.CreateInstance<X>();\r\n      this._data.name = name;\r\n      return this as Y;\r\n    }\r\n\r\n    public static implicit operator T(DataFileBuilder<T, Y> t) => t.Build();\r\n\r\n    public virtual Y SubscribeToBuildEvent(DataFileBuilder<T, Y>.AfterBuildDelegate d)\r\n    {\r\n      this.AfterBuildEvent += d;\r\n      return (Y) this;\r\n    }\r\n\r\n    public virtual Y UnsubscribeToBuildEvent(DataFileBuilder<T, Y>.AfterBuildDelegate d)\r\n    {\r\n      this.AfterBuildEvent -= d;\r\n      return (Y) this;\r\n    }\r\n\r\n    public virtual Y SubscribeToAfterAllBuildEvent(DataFileBuilder<T, Y>.AfterBuildDelegate d)\r\n    {\r\n      this.AfterAllModBuildsEvent += d;\r\n      return (Y) this;\r\n    }\r\n\r\n    public virtual Y UnubscribeToAfterAllBuildEvent(DataFileBuilder<T, Y>.AfterBuildDelegate d)\r\n    {\r\n      this.AfterAllModBuildsEvent -= d;\r\n      return (Y) this;\r\n    }\r\n\r\n    protected virtual void OnAfterBuildEvent(T d)\r\n    {\r\n      DataFileBuilder<T, Y>.AfterBuildDelegate afterBuildEvent = this.AfterBuildEvent;\r\n      if (afterBuildEvent == null)\r\n        return;\r\n      afterBuildEvent(d);\r\n    }\r\n\r\n    internal virtual void OnAfterAllModBuildsEvent(T d)\r\n    {\r\n      DataFileBuilder<T, Y>.AfterBuildDelegate allModBuildsEvent = this.AfterAllModBuildsEvent;\r\n      if (allModBuildsEvent == null)\r\n        return;\r\n      allModBuildsEvent(d);\r\n    }\r\n\r\n    public delegate void AfterBuildDelegate(T d)\r\n      where T : DataFile\r\n      where Y : DataFileBuilder<T, Y>, new();\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.Extensions\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.AddressableAssets;\r\nusing UnityEngine.Localization;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public static class Extensions\r\n  {\r\n    public static CardData[] GetCategoryCardData(string category, bool mustBeFinal = true)\r\n    {\r\n      return AddressableLoader.GetGroup<CardData>(\"CardData\").FindAll(new Predicate<CardData>(Condition)).ToArray();\r\n\r\n      bool Condition(CardData a)\r\n      {\r\n        if ((!(a.cardType.name == category) || a.isEnemyClunker) && (!(a.cardType.name == \"Clunker\") || !a.isEnemyClunker || !(category == \"Enemy\")))\r\n          return false;\r\n        if (!mustBeFinal)\r\n          return true;\r\n        LocalizedString titleKey = a.titleKey;\r\n        return titleKey != null && !titleKey.IsEmpty;\r\n      }\r\n    }\r\n\r\n    public static StatusEffectDataBuilder SetSummonPrefabRef(\r\n      this StatusEffectDataBuilder inst,\r\n      string name = \"SummonCreateCard\")\r\n    {\r\n      inst.FreeModify<StatusEffectSummon>((Action<StatusEffectSummon>) (summon => summon.effectPrefabRef = (AssetReference) new AssetReferenceGameObject(name)));\r\n      return inst;\r\n    }\r\n\r\n    public static bool IsCharm(this CardUpgradeData inst)\r\n    {\r\n      return MetaprogressionSystem.Get<List<string>>(\"charms\").Contains(inst.name);\r\n    }\r\n\r\n    public static void AddToCharms(this CardUpgradeData inst, UnlockData data)\r\n    {\r\n      MetaprogressionSystem.Add<string, string>(\"charms\", data.name, inst.name);\r\n    }\r\n\r\n    public static bool RemoveFromCharms(this CardUpgradeData inst, UnlockData data)\r\n    {\r\n      return MetaprogressionSystem.Remove<string, string>(\"charms\", data.name, inst.name);\r\n    }\r\n\r\n    public static bool IsCompanion(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Get<List<string>>(\"companions\").Contains(inst.name);\r\n    }\r\n\r\n    public static void AddToCompanions(this CardData inst)\r\n    {\r\n      MetaprogressionSystem.Add<string>(\"companions\", inst.name);\r\n    }\r\n\r\n    public static bool RemoveFromCompanions(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Remove<string>(\"companions\", inst.name);\r\n    }\r\n\r\n    public static bool IsItem(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Get<List<string>>(\"items\").Contains(inst.name);\r\n    }\r\n\r\n    public static void AddToItems(this CardData inst)\r\n    {\r\n      MetaprogressionSystem.Add<string>(\"items\", inst.name);\r\n    }\r\n\r\n    public static bool RemoveFromItems(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Remove<string>(\"items\", inst.name);\r\n    }\r\n\r\n    public static bool IsPet(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Get<Dictionary<string, string>>(\"pets\").ContainsKey(inst.name);\r\n    }\r\n\r\n    public static void AddToPets(this CardData inst, string requiredUnlock = null)\r\n    {\r\n      MetaprogressionSystem.Add<string, string>(\"pets\", inst.name, requiredUnlock);\r\n    }\r\n\r\n    public static bool RemoveFromPets(this CardData inst)\r\n    {\r\n      return MetaprogressionSystem.Remove<string, string>(\"pets\", inst.name, (string) null);\r\n    }\r\n\r\n    public static T[] RemoveFromArray<T>(this T[] sequence, T item)\r\n    {\r\n      return ((IEnumerable<T>) sequence).Where<T>((Func<T, bool>) (a => !a.Equals( (T) item))).ToArray<T>();\r\n    }\r\n\r\n    public static T[] RemoveFromArray<T>(this T[] sequence, Func<T, bool> item)\r\n    {\r\n      return ((IEnumerable<T>) sequence).Where<T>(item).ToArray<T>();\r\n    }\r\n\r\n    public static string PrefixGUID(string name, WildfrostMod mod)\r\n    {\r\n      return mod == null ? name : mod.GUID + \".\" + name;\r\n    }\r\n\r\n    public static string GetGUID(string name)\r\n    {\r\n      string str = name;\r\n      int num1 = 0;\r\n      int num2 = name.LastIndexOf('.') - num1;\r\n      int startIndex = num1;\r\n      int length = num2;\r\n      return str.Substring(startIndex, length);\r\n    }\r\n\r\n    public static WildfrostMod GetModFromGuid(string guid)\r\n    {\r\n      return Bootstrap.Mods.ToList<WildfrostMod>().Find((Predicate<WildfrostMod>) (a => a.GUID == guid));\r\n    }\r\n\r\n    public static CardAnimationProfile GetCardAnimationProfile(string name)\r\n    {\r\n      return Addressables.LoadAssetAsync<CardAnimationProfile>( name).WaitForCompletion();\r\n    }\r\n\r\n    public static TargetMode GetTargetMode(string name)\r\n    {\r\n      return Addressables.LoadAssetAsync<TargetMode>( name).WaitForCompletion();\r\n    }\r\n\r\n    public static void WithPools(this CardData data, params RewardPool[] pools)\r\n    {\r\n      foreach (RewardPool pool in pools)\r\n        pool.list.Add((DataFile) data);\r\n    }\r\n\r\n    public static void AddPool(this CardData data, RewardPool pool)\r\n    {\r\n      pool.list.Add((DataFile) data);\r\n    }\r\n\r\n    public static void WithPools(this CardUpgradeData data, params RewardPool[] pools)\r\n    {\r\n      foreach (RewardPool pool in pools)\r\n        pool.list.Add((DataFile) data);\r\n    }\r\n\r\n    public static void AddPool(this CardUpgradeData data, RewardPool pool)\r\n    {\r\n      pool.list.Add((DataFile) data);\r\n    }\r\n\r\n    public static LocalizedString GetLocalizedString(string table, string key)\r\n    {\r\n      return LocalizationHelper.GetCollection(table, new LocaleIdentifier(SystemLanguage.English)).GetString(key);\r\n    }\r\n\r\n    public static HashSet<RewardPool> GetAllRewardPools()\r\n    {\r\n      HashSet<RewardPool> list = new HashSet<RewardPool>();\r\n      foreach (ClassData classData in AddressableLoader.GetGroup<ClassData>(\"ClassData\"))\r\n        list.AddRange<RewardPool>((IEnumerable<RewardPool>) classData.rewardPools);\r\n      return list;\r\n    }\r\n\r\n    public static Y Edit<T, Y>(this T data)\r\n      where T : DataFile\r\n      where Y : DataFileBuilder<T, Y>, new()\r\n    {\r\n      Y y = new Y();\r\n      y.Mod = data.ModAdded ?? (WildfrostMod) new InternalMod((string) null);\r\n      y._data = data;\r\n      return y;\r\n    }\r\n\r\n    public static RewardPool GetRewardPool(string name)\r\n    {\r\n      foreach (ClassData classData in AddressableLoader.GetGroup<ClassData>(\"ClassData\"))\r\n      {\r\n        foreach (RewardPool rewardPool in classData.rewardPools)\r\n        {\r\n          if (rewardPool.name == name)\r\n            return rewardPool;\r\n        }\r\n      }\r\n      return (RewardPool) null;\r\n    }\r\n\r\n    public static Texture2D ToTex(this string path)\r\n    {\r\n      Texture2D tex = new Texture2D(0, 0, TextureFormat.RGBA32, false);\r\n      if (!File.Exists(path))\r\n        return tex;\r\n      tex.LoadImage(File.ReadAllBytes(path));\r\n      return tex;\r\n    }\r\n\r\n    public static Sprite ToSprite(this string path) => path.ToTex().ToSprite();\r\n\r\n    public static Sprite ToSprite(this Texture2D t, Vector2? v = null)\r\n    {\r\n      Vector2 pivot = v ?? new Vector2(0.5f, 0.5f);\r\n      return Sprite.Create(t, new Rect(0.0f, 0.0f, (float) t.width, (float) t.height), pivot);\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.EyeDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class EyeDataBuilder : DataFileBuilder<EyeData, EyeDataBuilder>\r\n  {\r\n    public EyeDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public EyeDataBuilder()\r\n    {\r\n    }\r\n\r\n    public EyeDataBuilder WithCardData(string cardData)\r\n    {\r\n      this._data.cardData = cardData;\r\n      return this;\r\n    }\r\n\r\n    public EyeDataBuilder WithCardData(CardData cardData)\r\n    {\r\n      this._data.cardData = cardData.name;\r\n      return this;\r\n    }\r\n\r\n    public EyeDataBuilder WithEyes(params EyeData.Eye[] eyes)\r\n    {\r\n      this._data.eyes = eyes;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.GameModeBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class GameModeBuilder : DataFileBuilder<GameMode, GameModeBuilder>\r\n  {\r\n    public GameModeBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public GameModeBuilder()\r\n    {\r\n    }\r\n\r\n    public GameModeBuilder WithSaveFileName(string saveFileName)\r\n    {\r\n      this._data.saveFileName = saveFileName;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithSeed(string seed)\r\n    {\r\n      this._data.seed = seed;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithClasses(params ClassData[] classes)\r\n    {\r\n      this._data.classes = classes;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithGenerator(CampaignGenerator generator)\r\n    {\r\n      this._data.generator = generator;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithPopulator(CampaignPopulator populator)\r\n    {\r\n      this._data.populator = populator;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithStartInNode(bool startInNode)\r\n    {\r\n      this._data.startInNode = startInNode;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithTakeStartingPet(bool takeStartingPet = true)\r\n    {\r\n      this._data.takeStartingPet = takeStartingPet;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithCountsAsWin(bool countsAsWin = true)\r\n    {\r\n      this._data.countsAsWin = countsAsWin;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithShowStats(bool showStats = true)\r\n    {\r\n      this._data.showStats = showStats;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithGainProgress(bool gainProgress = true)\r\n    {\r\n      this._data.gainProgress = gainProgress;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithDoSave(bool doSave = true)\r\n    {\r\n      this._data.doSave = doSave;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithCanRestart(bool canRestart = true)\r\n    {\r\n      this._data.canRestart = canRestart;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithCanGoBack(bool canGoBack = true)\r\n    {\r\n      this._data.canGoBack = canGoBack;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithSubmitScore(bool submitScore = false)\r\n    {\r\n      this._data.submitScore = submitScore;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithMainGameMode(bool mainGameMode = true)\r\n    {\r\n      this._data.mainGameMode = mainGameMode;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithDailyRun(bool dailyRun = false)\r\n    {\r\n      this._data.dailyRun = dailyRun;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithTutorialRun(bool tutorialRun = false)\r\n    {\r\n      this._data.tutorialRun = tutorialRun;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithLeaderboardType(Scores.Type leaderboardType)\r\n    {\r\n      this._data.leaderboardType = leaderboardType;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithStartScene(string startScene)\r\n    {\r\n      this._data.startScene = startScene;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithSceneAfterSelection(string sceneAfterSelection = \"Campaign\")\r\n    {\r\n      this._data.sceneAfterSelection = sceneAfterSelection;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithCampaignSystemNames(params string[] campaignSystemNames)\r\n    {\r\n      this._data.campaignSystemNames = campaignSystemNames;\r\n      return this;\r\n    }\r\n\r\n    public GameModeBuilder WithSystemsToDisable(params string[] systemsToDisable)\r\n    {\r\n      this._data.systemsToDisable = systemsToDisable;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.GameModifierDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing FMODUnity;\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class GameModifierDataBuilder : DataFileBuilder<GameModifierData, GameModifierDataBuilder>\r\n  {\r\n    public GameModifierDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public GameModifierDataBuilder()\r\n    {\r\n    }\r\n\r\n    public GameModifierDataBuilder WithValue(int value = 100)\r\n    {\r\n      this._data.value = value;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithVisible(bool visible = true)\r\n    {\r\n      this._data.visible = visible;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithBellSprite(Sprite bellSprite)\r\n    {\r\n      this._data.bellSprite = bellSprite;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithBellSprite(string bellSprite)\r\n    {\r\n      this._data.bellSprite = this.Mod.GetImageSprite(bellSprite);\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithDingerSprite(Sprite dingerSprite)\r\n    {\r\n      this._data.dingerSprite = dingerSprite;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithDingerSprite(string dingerSprite)\r\n    {\r\n      this._data.dingerSprite = this.Mod.GetImageSprite(dingerSprite);\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithTitle(LocalizedString title)\r\n    {\r\n      this._data.titleKey = title;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_modifier_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_modifier_title\");\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithDescription(LocalizedString title)\r\n    {\r\n      this._data.descriptionKey = title;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithDescription(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Cards\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_modifier_desc\", title);\r\n      this._data.descriptionKey = collection.GetString(this._data.name + \"_modifier_desc\");\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithSystemsToAdd(params string[] systemsToAdd)\r\n    {\r\n      this._data.systemsToAdd = systemsToAdd;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithSetupScripts(params Script[] setupScripts)\r\n    {\r\n      this._data.setupScripts = setupScripts;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithStartScripts(params Script[] startScripts)\r\n    {\r\n      this._data.startScripts = startScripts;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithScriptPriority(int scriptPriority)\r\n    {\r\n      this._data.scriptPriority = scriptPriority;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithBlockedBy(params GameModifierData[] blockedBy)\r\n    {\r\n      this._data.blockedBy = blockedBy;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithLinkedStormBell(HardModeModifierData linkedStormBell)\r\n    {\r\n      this._data.linkedStormBell = linkedStormBell;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithRingSfxEvent(EventReference ringSfxEvent)\r\n    {\r\n      this._data.ringSfxEvent = ringSfxEvent;\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithRingSfxPitch()\r\n    {\r\n      this._data.ringSfxPitch = new Vector2(1f, 1f);\r\n      return this;\r\n    }\r\n\r\n    public GameModifierDataBuilder WithRingSfxPitch(Vector2 ringSfxPitch)\r\n    {\r\n      this._data.ringSfxPitch = ringSfxPitch;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.InternalMod\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  internal class InternalMod : WildfrostMod\r\n  {\r\n    internal InternalMod(string modDirectory)\r\n      : base(modDirectory)\r\n    {\r\n    }\r\n\r\n    public override string GUID => \"wildfrost\";\r\n\r\n    public override string[] Depends => new string[0];\r\n\r\n    public override string Title => \"wildfrost\";\r\n\r\n    public override string Description => \"wildfrost\";\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.KeywordDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class KeywordDataBuilder : DataFileBuilder<KeywordData, KeywordDataBuilder>\r\n  {\r\n    public KeywordDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public KeywordDataBuilder()\r\n    {\r\n    }\r\n\r\n    public KeywordDataBuilder WithTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Tooltips\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_title\", title);\r\n      this._data.titleKey = collection.GetString(this._data.name + \"_title\");\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithDescription(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Tooltips\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_desc\", title);\r\n      this._data.descKey = collection.GetString(this._data.name + \"_desc\");\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithTitleColour(Color? theColour = null)\r\n    {\r\n      if (!theColour.HasValue)\r\n        theColour = new Color?(new Color(1f, 0.7921569f, 0.3411765f, 1f));\r\n      this._data.titleColour = theColour.Value;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithBodyColour(Color? theColour = null)\r\n    {\r\n      if (!theColour.HasValue)\r\n        theColour = new Color?(Color.white);\r\n      this._data.bodyColour = theColour.Value;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithNoteColour(Color? theColour = null)\r\n    {\r\n      if (!theColour.HasValue)\r\n        theColour = new Color?(Color.gray);\r\n      this._data.noteColour = theColour.Value;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithPanelColour(Color theColour)\r\n    {\r\n      this._data.panelColor = theColour;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithPanelSprite(string image)\r\n    {\r\n      this._data.panelSprite = this.Mod.GetImageSprite(image);\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithIconName(string iconName)\r\n    {\r\n      this._data.iconName = iconName;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithIconTint(Color hexColor)\r\n    {\r\n      this._data.iconTintHex = hexColor.ToHexRGB();\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithShow(bool show = true)\r\n    {\r\n      this._data.show = show;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithShowName(bool show)\r\n    {\r\n      this._data.showName = show;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithShowIcon(bool show = true)\r\n    {\r\n      this._data.showIcon = show;\r\n      return this;\r\n    }\r\n\r\n    public KeywordDataBuilder WithCanStack(bool show)\r\n    {\r\n      this._data.canStack = show;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.LocalizationHelper\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing HarmonyLib;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.AddressableAssets;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Settings;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public static class LocalizationHelper\r\n  {\r\n    private static readonly Dictionary<string, StringTable> stringTables = new Dictionary<string, StringTable>();\r\n    private static Harmony _harmony = new Harmony(\"wildfrost\");\r\n\r\n    public static Locale TryAddLocale(LocaleIdentifier locali)\r\n    {\r\n      if (!LocalizationSettings.AvailableLocales.Locales.All<Locale>((Func<Locale, bool>) (a => a.Identifier != locali)))\r\n        return LocalizationSettings.AvailableLocales.Locales.Find((Predicate<Locale>) (a => a.Identifier == locali));\r\n      Locale locale = Locale.CreateLocale(locali);\r\n      locale.SortOrder = (ushort) LocalizationSettings.AvailableLocales.Locales.Count;\r\n      LocalizationSettings.AvailableLocales.Locales.Add(locale);\r\n      return locale;\r\n    }\r\n\r\n    static LocalizationHelper()\r\n    {\r\n      LocalizationHelper._harmony.PatchAll(typeof (LocalizationHelper).Assembly);\r\n    }\r\n\r\n    public static StringTable GetCollection(string name, LocaleIdentifier identifier)\r\n    {\r\n      string key = name + \"_\" + identifier.Code;\r\n      StringTable collection1 = Addressables.LoadAssetAsync<StringTable>( key).WaitForCompletion();\r\n      if (!((UnityEngine.Object) collection1 == (UnityEngine.Object) null))\r\n        return collection1;\r\n      StringTable collection2;\r\n      if (LocalizationHelper.stringTables.TryGetValue(key, out collection2))\r\n        return collection2;\r\n      StringTable instance = ScriptableObject.CreateInstance<StringTable>();\r\n      instance.name = key;\r\n      instance.LocaleIdentifier = identifier;\r\n      StringTable stringTable = Addressables.LoadAssetAsync<StringTable>( (name + \"_\" + new LocaleIdentifier(SystemLanguage.English).Code)).WaitForCompletion();\r\n      instance.SharedData = stringTable.SharedData;\r\n      LocalizationHelper.stringTables.Add(key, instance);\r\n      return instance;\r\n    }\r\n\r\n    public static LocalizedString GetString(this StringTable table, string key)\r\n    {\r\n      TableReference tableCollectionName = (TableReference) table.TableCollectionName;\r\n      LocalizedString localizedString = new LocalizedString();\r\n      localizedString.SetReference(tableCollectionName, (TableEntryReference) key);\r\n      return localizedString;\r\n    }\r\n\r\n    public static void SetString(this StringTable table, string key, string value)\r\n    {\r\n      long id = table.SharedData.GetId(key);\r\n      if (id == 0L)\r\n        id = table.SharedData.AddKey(key).Id;\r\n      if (!table.ContainsKey(id))\r\n        table.AddEntry(key, value);\r\n      else\r\n        table[id].Value = value;\r\n    }\r\n\r\n    [HarmonyPatch(typeof (LocalizedString), \"GetLocalizedString\", new System.Type[] {})]\r\n    private class PatchLocalie1\r\n    {\r\n      [HarmonyPostfix]\r\n      private static void Postfix(ref string __result, LocalizedString __instance)\r\n      {\r\n        if (!string.IsNullOrEmpty(__result))\r\n          return;\r\n        StringTable collection = LocalizationHelper.GetCollection(__instance.TableReference.TableCollectionName, LocalizationSettings.SelectedLocale.Identifier);\r\n        TableEntryReference tableEntryReference = __instance.TableEntryReference;\r\n        long num;\r\n        if (tableEntryReference.ReferenceType != TableEntryReference.Type.Id)\r\n        {\r\n          SharedTableData sharedData = collection.SharedData;\r\n          tableEntryReference = __instance.TableEntryReference;\r\n          string key = tableEntryReference.Key;\r\n          num = sharedData.GetId(key);\r\n        }\r\n        else\r\n        {\r\n          tableEntryReference = __instance.TableEntryReference;\r\n          num = tableEntryReference.KeyId;\r\n        }\r\n        long keyId = num;\r\n        StringTableEntry stringTableEntry;\r\n        if (!collection.TryGetValue(keyId, out stringTableEntry))\r\n          return;\r\n        __result = stringTableEntry.Value;\r\n      }\r\n    }\r\n\r\n    [HarmonyPatch(typeof (LocalizedStringDatabase), \"GenerateLocalizedString\", new System.Type[] {typeof (StringTable), typeof (StringTableEntry), typeof (TableReference), typeof (TableEntryReference), typeof (Locale), typeof (IList<object>)})]\r\n    private class PatchLocalie2\r\n    {\r\n      [HarmonyPostfix]\r\n      private static void Postfix(\r\n        ref string __result,\r\n        LocalizedStringDatabase __instance,\r\n        StringTable table,\r\n        StringTableEntry entry,\r\n        TableReference tableReference,\r\n        TableEntryReference tableEntryReference,\r\n        Locale locale,\r\n        IList<object> arguments)\r\n      {\r\n        if (!string.IsNullOrEmpty(__result))\r\n          return;\r\n        StringTable collection = LocalizationHelper.GetCollection(tableReference.TableCollectionName, locale.Identifier);\r\n        long keyId = tableEntryReference.ReferenceType == TableEntryReference.Type.Id ? tableEntryReference.KeyId : collection.SharedData.GetId(tableEntryReference.Key);\r\n        StringTableEntry stringTableEntry;\r\n        if (!collection.TryGetValue(keyId, out stringTableEntry))\r\n          return;\r\n        __result = stringTableEntry.Value;\r\n      }\r\n    }\r\n\r\n    [HarmonyPatch(typeof (LocalizedStringDatabase), \"GetLocalizedString\", new System.Type[] {typeof (TableReference), typeof (TableEntryReference), typeof (IList<object>), typeof (Locale), typeof (FallbackBehavior)})]\r\n    private class PatchLocalie3\r\n    {\r\n      [HarmonyPostfix]\r\n      private static void Postfix(\r\n        ref string __result,\r\n        LocalizedStringDatabase __instance,\r\n        TableReference tableReference,\r\n        TableEntryReference tableEntryReference,\r\n        IList<object> arguments,\r\n        Locale locale = null,\r\n        FallbackBehavior fallbackBehavior = FallbackBehavior.UseProjectSettings)\r\n      {\r\n        if (!string.IsNullOrEmpty(__result))\r\n          return;\r\n        if ((UnityEngine.Object) locale == (UnityEngine.Object) null)\r\n          locale = LocalizationSettings.SelectedLocale;\r\n        StringTable collection = LocalizationHelper.GetCollection(tableReference.TableCollectionName, locale.Identifier);\r\n        long keyId = tableEntryReference.ReferenceType == TableEntryReference.Type.Id ? tableEntryReference.KeyId : collection.SharedData.GetId(tableEntryReference.Key);\r\n        StringTableEntry stringTableEntry;\r\n        if (!collection.TryGetValue(keyId, out stringTableEntry))\r\n          return;\r\n        __result = stringTableEntry.Value;\r\n      }\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.ModsSceneManager\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class ModsSceneManager : MonoBehaviour\r\n  {\r\n    [SerializeField]\r\n    private GameObject Content;\r\n    [SerializeField]\r\n    private GameObject ModPrefab;\r\n    private List<WildfrostMod> instantiatedMods = new List<WildfrostMod>();\r\n\r\n    private IEnumerator Start()\r\n    {\r\n      foreach (WildfrostMod mod in Bootstrap.Mods)\r\n      {\r\n        if (!this.instantiatedMods.Contains(mod))\r\n        {\r\n          GameObject gameObject = this.ModPrefab.InstantiateKeepName<GameObject>();\r\n          gameObject.transform.SetParent(this.Content.transform);\r\n          gameObject.transform.SetLocalZ(0.0f);\r\n          gameObject.transform.SetLocalPositionAndRotation(gameObject.transform.localPosition, Quaternion.identity);\r\n          ModHolder componentInChildren = gameObject.GetComponentInChildren<ModHolder>();\r\n          componentInChildren.Mod = mod;\r\n          componentInChildren.UpdateInfo();\r\n          this.instantiatedMods.Add(mod);\r\n        }\r\n      }\r\n      Time.timeScale = 1f;\r\n      yield break;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.StatusEffectDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class StatusEffectDataBuilder : DataFileBuilder<StatusEffectData, StatusEffectDataBuilder>\r\n  {\r\n    public StatusEffectDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public StatusEffectDataBuilder()\r\n    {\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithIsStatus(bool value)\r\n    {\r\n      this._data.isStatus = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithIsReaction(bool value)\r\n    {\r\n      this._data.isReaction = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithIsKeyword(bool value)\r\n    {\r\n      this._data.isKeyword = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithType(string type)\r\n    {\r\n      this._data.type = type;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithKeyword(string type)\r\n    {\r\n      this._data.keyword = type;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithIconGroupName(string type)\r\n    {\r\n      this._data.iconGroupName = type;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithVisible(bool value)\r\n    {\r\n      this._data.visible = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithStackable(bool value)\r\n    {\r\n      this._data.stackable = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithOffensive(bool value)\r\n    {\r\n      this._data.offensive = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithMakesOffensive(bool value)\r\n    {\r\n      this._data.makesOffensive = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithDoesDamage(bool value)\r\n    {\r\n      this._data.doesDamage = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithCanBeBoosted(bool value)\r\n    {\r\n      this._data.canBeBoosted = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithText(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"Card Text\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_text\", title);\r\n      this._data.textKey = collection.GetString(this._data.name + \"_text\");\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithTextInsert(string value)\r\n    {\r\n      this._data.textInsert = value;\r\n      return this;\r\n    }\r\n\r\n    public StatusEffectDataBuilder WithOrder(int order)\r\n    {\r\n      this._data.textOrder = order;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.TraitDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class TraitDataBuilder : DataFileBuilder<TraitData, TraitDataBuilder>\r\n  {\r\n    public TraitDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public TraitDataBuilder()\r\n    {\r\n    }\r\n\r\n    public TraitDataBuilder WithKeyword(KeywordData data)\r\n    {\r\n      this._data.keyword = data;\r\n      return this;\r\n    }\r\n\r\n    public TraitDataBuilder WithEffects(params StatusEffectData[] effects)\r\n    {\r\n      this._data.effects = effects;\r\n      return this;\r\n    }\r\n\r\n    public TraitDataBuilder WithOverrides(params TraitData[] traits)\r\n    {\r\n      this._data.overrides = traits;\r\n      return this;\r\n    }\r\n\r\n    public TraitDataBuilder WithIsReaction(bool isReaction)\r\n    {\r\n      this._data.isReaction = isReaction;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n﻿// Decompiled with JetBrains decompiler\r\n// Type: Deadpan.Enums.Engine.Components.Modding.UnlockDataBuilder\r\n// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n// MVID: 6CFD501E-4109-4C31-BEBD-DF2E7FCC442F\r\n// Assembly location: C:\\Program Files (x86)\\Steam\\steamapps\\common\\Wildfrost\\Modded\\Wildfrost_Data\\Managed\\Assembly-CSharp.dll\r\n\r\nusing HarmonyLib;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Tables;\r\n\r\n#nullable disable\r\nnamespace Deadpan.Enums.Engine.Components.Modding\r\n{\r\n  public class UnlockDataBuilder : DataFileBuilder<UnlockData, UnlockDataBuilder>\r\n  {\r\n    public UnlockDataBuilder(WildfrostMod mod)\r\n      : base(mod)\r\n    {\r\n    }\r\n\r\n    public UnlockDataBuilder()\r\n    {\r\n    }\r\n\r\n    public UnlockDataBuilder WithUnlockDescription(LocalizedString str)\r\n    {\r\n      this._data.unlockDesc = str;\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithUnlockTitle(LocalizedString str)\r\n    {\r\n      this._data.unlockTitle = str;\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithUnlockDescription(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"UI Text\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_unlockDesc\", title);\r\n      this._data.unlockDesc = collection.GetString(this._data.name + \"_unlockDesc\");\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithUnlockTitle(string title, SystemLanguage lang = SystemLanguage.English)\r\n    {\r\n      StringTable collection = LocalizationHelper.GetCollection(\"UI Text\", new LocaleIdentifier(lang));\r\n      collection.SetString(this._data.name + \"_unlockTitle\", title);\r\n      this._data.unlockTitle = collection.GetString(this._data.name + \"_unlockTitle\");\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithRequires(params UnlockData[] requires)\r\n    {\r\n      this._data.requires = requires;\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithRequires(params string[] requires)\r\n    {\r\n      this._data.requires = ((IEnumerable<string>) requires).Select<string, UnlockData>(new Func<string, UnlockData>(this.Mod.Get<UnlockData>)).ToArray<UnlockData>();\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithLowPriority(float priority)\r\n    {\r\n      this._data.lowPriority = priority;\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithBuilding(BuildingType relatedBuilding)\r\n    {\r\n      this._data.relatedBuilding = relatedBuilding;\r\n      this.SubscribeToBuildEvent((DataFileBuilder<UnlockData, UnlockDataBuilder>.AfterBuildDelegate) (data => relatedBuilding.unlocks = relatedBuilding.unlocks.AddToArray<UnlockData>(data)));\r\n      return this;\r\n    }\r\n\r\n    public UnlockDataBuilder WithBuilding(string relatedBuilding)\r\n    {\r\n      return this.WithBuilding(this.Mod.Get<BuildingType>(relatedBuilding));\r\n    }\r\n\r\n    public UnlockDataBuilder WithType(UnlockData.Type type)\r\n    {\r\n      this._data.type = type;\r\n      return this;\r\n    }\r\n  }\r\n}";
            string[] lines = s.Split(['\n'], StringSplitOptions.None);
            List<string> newLines = [];

            var regex = new Regex(@"public+ [A-Za-z]+Builder [A-Za-z]+\(.*$");
            foreach (string line in lines)
            {
                string newLine = line;
                var matches = regex.Match(line);
                var parts = matches.Value.Split([" "], 3, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length == 3)
                {
                    int i = parts[2].IndexOf('(');
                    newLine = $"{parts[0]} static {parts[1].Replace("Builder", "")} {

                        parts[2].Insert(i+1, $"this {parts[1].Replace("Builder", "")} dataFile, ")
                        }";
                }
                int ii = newLine.IndexOf("Builder : DataFileBuilder");
                if (ii != -1)
                {
                    newLine = (newLine.Substring(0, ii) + "Helpers")
                        .Replace(" class ", " static class ");
                    
                }
                newLine = newLine.Replace(" this;", " dataFile;")
                    .Replace("namespace Deadpan.Enums.Engine.Components.Modding", "")
                    .Replace("this._data.", "dataFile.")
                    .Replace("this.Mod.", "new InternalMod(null).")
                    .Replace(" this.", " dataFile.")
                    .Replace("Builder : DataFileBuilder", "Builder : DataFileBuilder");
                newLines.Add(newLine);
            }
            Debug.LogWarning(newLines.Join(delimiter: "\n"));
        }

        public void Dependencies()
        {
            var allAssemblies = AppDomain.CurrentDomain.GetAssemblies();
            foreach (var mod in Bootstrap.Mods)
            {
                var assembly = mod.GetType().Assembly;
                var references = assembly.GetReferencedAssemblies();
                var refNames = references.Select(r => r.FullName);

                var referenceAssemblies = allAssemblies.Where(ass => refNames.Contains(ass.FullName));
                if (referenceAssemblies.Any())
                {
                    var assemblyModType = referenceAssemblies.SelectMany(refe => refe.GetTypes()).Where(type => type.BaseType == typeof(WildfrostMod));
                    var assemblyMods = Bootstrap.Mods.Where(am => assemblyModType.Contains(am.GetType()));
                    Debug.LogWarning($"{mod.Title}: [{assemblyMods.Join(delimiter: ", ")}]");
                }
            }
        }

        public void Statuser()
        {
            var assembly = typeof(StatusEffectData).Assembly;
            Type[] types = assembly.GetTypes().Where(t => t != typeof(StatusEffectData) && typeof(StatusEffectData).IsAssignableFrom(t)).ToArray();
            Dictionary<(Type fieldType, string fieldName), List<Type>> triple = new();
            List<(string fieldType, string fieldName, Type type)> typle = new();

            var lines = File.ReadAllLines("C:\\Users\\harri\\Documents\\Modding stuff\\Wildfrost122\\Assembly-CSharp-Publicized\\122dump.cs");
            Dictionary<(string className, string name), string> fourple = new();
            string recentClass = "";
            for (int i = 0; i < lines.Length; i++)
            {
                if (lines[i].Contains(" class "))
                    recentClass = lines[i].Split([" class "], StringSplitOptions.None).Last().Split([" "], StringSplitOptions.None).First();
                if (lines[i].Contains("[SerializeField]"))
                {
                    while (!lines[i + 1].Contains("public") && !lines[i + 1].Contains("private") && !lines[i + 1].Contains("internal"))
                        i++;
                    var parts = lines[i + 1].Split([" "], 3, StringSplitOptions.RemoveEmptyEntries);

                    string line = parts.Last();
                    while (!line.Contains(';'))
                    {
                        if (!lines[i + 2].Contains(';'))
                            line += '\n' + lines[i + 2];
                        else
                        {
                            line += '\n' + lines[i + 2].Split(';').First();
                            break;
                        }
                        i++;
                    }
                    if (lines[i + 1].Contains('='))
                        fourple[(recentClass, parts[2].Split([" ="], StringSplitOptions.None).First().Replace(";", ""))] = line.Replace(";", "");
                }
            }

            foreach (Type type in types)
            {
                //Debug.LogError(type.Name);
                foreach (FieldInfo field in type.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
                {
                    //Debug.LogWarning((field.FieldType, field.Name));
                    var customAttribute = field.GetCustomAttribute<SerializeField>();
                    if (customAttribute != null)
                    {
                        if (!triple.TryGetValue((field.FieldType, field.Name), out var list) || list == null)
                            triple[(field.FieldType, field.Name)] = new();
                        triple[(field.FieldType, field.Name)].Add(type);

                        string fieldType = field.FieldType.Name switch
                        {
                            "Single[]" => "float[]",
                            "Boolean[]" => "bool[]",
                            "Int32[]" => "int[]",
                            "String[]" => "string[]",
                            nameof(Single) => "float",
                            nameof(Boolean) => "bool",
                            nameof(Int32) => "int",
                            nameof(String) => "string",
                            _ => field.FieldType.FullName.Replace('+', '.')
                        };
                        //if (field.FieldType.)

                        typle.Add((fieldType, field.Name, type));
                    }
                }
            }
            var result = "";
            foreach (var entry in typle)
            {
                if (!fourple.TryGetValue((entry.type.Name, entry.fieldName), out string name))
                    name = entry.fieldName;
                //Debug.LogWarning(entry.Key + ": " + entry.Value.Join());
                result += $$"""
                    public static {{entry.type.Name}} With{{entry.fieldName.ToUpperFirstLetter()}}(this {{entry.type.Name}} dataFile, {{entry.fieldType}} {{name}})
                    {
                        dataFile.{{entry.fieldName}} = {{entry.fieldName}};
                        return dataFile;
                    }


                    """;
            }
            Debug.LogWarning(result);
        }


        public override void Load()
        {
            Debug.LogWarning("BaseLoad start");
            base.Load();

            behaviour = new GameObject(GetType().Name);
            GameObject.DontDestroyOnLoad(behaviour);
            behaviour.hideFlags = HideFlags.HideInHierarchy | HideFlags.DontUnloadUnusedAsset |
                                  HideFlags.HideInInspector | HideFlags.NotEditable;

            var e = behaviour.AddComponent<HopeModBehaviour>();
            Debug.LogError("lesgoo");

            List<string> lines = [];
            string r = "";
            string t = "";
            var map = Addressables.ResourceLocators.First() as ResourceLocationMap;
            bool flag = false;
            for (int i = 0; i < map.Keys.Count(); i++)
            {
                if (map.Keys.ToArray()[i].ToString().Contains(".asset"))
                    flag = true;
                if (flag)
                {
                    if (map.Keys.ToArray()[i].ToString().Length == "0f9ef18373f6a024c97926f5c4b128bb".Length
                     && !map.Keys.ToArray()[i].ToString().Contains("/")
                     || map.Keys.ToArray()[i].ToString().Contains(".bundle"))
                        t += "\n" + map.Keys.ToArray()[i];
                    else
                        lines.Add(map.Keys.ToArray()[i].ToString());
                }
            }

            lines.Sort();
            Debug.LogWarning(lines.Join(delimiter: "\n"));
            //Debug.LogWarning(t);
            //Debug.Log(r);
            string path = "CardAtlas";
            var item = Addressables.LoadAssetAsync<UnityEngine.Object>(path).WaitForCompletion();
            Debug.Log((item, item?.GetType()));
        }
        public override void Unload()
        {
            TMP_Settings.defaultSpriteAsset.fallbackSpriteAssets.Remove(this.SpriteAsset);
            base.Unload();
            GameObject.Destroy(behaviour);
            behaviour = null;
        }










    }

    [HarmonyPatch(typeof(GameUpdateDisplayer), nameof(GameUpdateDisplayer.Check))]
    static class PatchUpdate
    {
        static void Prefix()
        {
            Debug.LogError("CHECKING!!!");
        }
    }
}